{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","color","style","backgroundColor","navColor","href","title","type","id","role","onClick","handleMode","TextForm","useState","text","setText","heading","value","onChange","event","console","log","target","rows","newText","toUpperCase","showAlert","toLowerCase","arr","split","i","length","charAt","slice","join","txt","document","getElementById","select","navigator","clipboard","writeText","Alert","alert","word","lower","capitalize","msg","defaultProps","App","pinkMode","blueMode","darkMode","lightMode","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c213cb51.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <>\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode.color===\"white\"?\"dark\":\"light\"}`} style={{backgroundColor:props.mode.navColor}}>\r\n                <div className=\"container-fluid\">\r\n                    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                        <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                        </li>\r\n                        <li className=\"nav-item dropdown\">\r\n                            <a className=\"nav-link dropdown-toggle\" href=\"\" id=\"navbarDropdown\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                                Themes\r\n                            </a>\r\n                            <ul className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\r\n                                <li><a className=\"dropdown-item\" onClick={()=>{props.handleMode(\"light\")}} href=\"javascript:void(0);\">Light Mode</a></li>\r\n                                <li><a className=\"dropdown-item\" onClick={()=>{props.handleMode(\"dark\")}} href=\"javascript:void(0);\">Dark Mode</a></li>\r\n                                <li><a className=\"dropdown-item\" onClick={()=>{props.handleMode(\"blue\")}} href=\"javascript:void(0);\">Blue Mode</a></li>\r\n                                <li><a className=\"dropdown-item\" onClick={()=>{props.handleMode(\"pink\")}} href=\"javascript:void(0);\">Pink Mode</a></li>\r\n                            </ul>\r\n                        </li>\r\n                    </ul>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string,\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: \"TextUtils\",\r\n}","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const [text, setText] = useState(\"\");\r\n\r\n    const handleUpClick = ()=>{\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Uppercase\", \"success\");\r\n    }\r\n\r\n    const handleLoClick = ()=>{\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Lowercase\", \"success\");\r\n    }\r\n\r\n    const handleClearClick = ()=>{\r\n        let newText = \"\";\r\n        setText(newText);\r\n        props.showAlert(\"Cleared the text\", \"success\");\r\n    }\r\n\r\n    const handleCopy = ()=>{\r\n        let txt = document.getElementById(\"mybox\");\r\n        txt.select();\r\n        navigator.clipboard.writeText(txt.value);\r\n        props.showAlert(\"Copied to clipboard\", \"success\");\r\n    }\r\n\r\n    const handleExtraSpaces = ()=>{\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Removed extra spaces\", \"success\");\r\n    }\r\n\r\n    const handleCapClick = ()=>{\r\n        const arr = text.split(\" \");\r\n\r\n        for (let i = 0; i < arr.length; i++) {\r\n            arr[i] = arr[i].charAt(0).toUpperCase() + arr[i].slice(1);\r\n\r\n        }\r\n\r\n        let newText = arr.join(\" \");\r\n        setText(newText);\r\n        props.showAlert(\"Capitalized the text\", \"success\");\r\n    }\r\n\r\n    const handleOnChange = (event)=>{\r\n        console.log(\"changed\");\r\n        setText(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div className=\"my-3 container\">\r\n            <h3>{props.heading}:</h3>\r\n            <div className=\"mb-3 container\">\r\n                <textarea className=\"form-control\" style={{backgroundColor:props.mode.backgroundColor, color:props.mode.color}} value={text} onChange={handleOnChange} id=\"mybox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary m-1\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n            <button className=\"btn btn-warning m-1\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n            <button className=\"btn btn-success m-1\" onClick={handleCapClick}>Convert to Capitalize First</button>\r\n            <button className=\"btn btn-info m-1\" onClick={handleCopy}>Copy Text</button>\r\n            <button className=\"btn btn-secondary m-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n            <button className=\"btn btn-danger m-1\" onClick={handleClearClick}>Clear Text</button>\r\n        </div>\r\n        <div className=\"container my-3\">\r\n            <h2>Your text summary</h2>\r\n            <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n            <p>{0.008 * text.split(\" \").length} Minutes to read</p>\r\n            <h2>Preview</h2>\r\n            <pre>{text.length>0?text:\"Enter your text to preview it here.\"}</pre>\r\n        </div>\r\n        </>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word)=>{\r\n        let lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, {useState} from 'react';\nimport Alert from './components/Alert';\n\nfunction App() {\n  let pinkMode = {\n    backgroundColor: \"#e1487c\",\n    color: \"white\",\n    navColor:\"#d71d5c\"\n  }\n\n  let blueMode = {\n    backgroundColor: \"#2083d3\",\n    color: \"white\",\n    navColor:\"#3f51b5\"\n  }\n\n  let darkMode = {\n    backgroundColor: \"rgb(33, 37, 41)\",\n    color: \"white\",\n    navColor:\"black\"\n  }\n\n  let lightMode = {\n    backgroundColor: \"white\",\n    color: \"black\",\n    navColor:\"rgb(248, 249, 250)\"\n  }\n\n  const [mode, setMode] = useState(lightMode);\n  const [alert, setAlert] = useState(null);\n\n  const handleMode = (mode)=>{\n    if(mode===\"light\"){\n      setMode(lightMode);\n      document.body.style.backgroundColor = lightMode.backgroundColor;\n      document.body.style.color = lightMode.color;\n      showAlert(\"Light mode enabled\", \"success\");\n    }\n    else if(mode===\"dark\"){\n      setMode(darkMode);\n      document.body.style.backgroundColor = darkMode.backgroundColor;\n      document.body.style.color = darkMode.color;\n      showAlert(\"Dark mode enabled\", \"success\");\n    }\n    else if(mode===\"blue\"){\n      setMode(blueMode);\n      document.body.style.backgroundColor = blueMode.backgroundColor;\n      document.body.style.color = blueMode.color;\n      showAlert(\"Blue mode enabled\", \"success\");\n    }\n    else if(mode===\"pink\"){\n      setMode(pinkMode);\n      document.body.style.backgroundColor = pinkMode.backgroundColor;\n      document.body.style.color = pinkMode.color;\n      showAlert(\"Pink mode enabled\", \"success\");\n    }\n  }\n\n  const showAlert = (message, type)=>{\n    setAlert({\n      msg: message,\n      type: type\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 3000);\n  }\n\n  return (\n    <>\n    <Navbar title=\"TextUtils\" mode={mode} handleMode={handleMode} />\n    <Alert alert={alert} />\n    <TextForm showAlert={showAlert} heading=\"Enter The Text To Analyze\" mode={mode} />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}